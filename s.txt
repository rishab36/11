import SwiftUI
import WebKit
import CoreLocation

// MARK: - Location Manager
class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
    private let manager = CLLocationManager()
    @Published var location: CLLocation?

    override init() {
        super.init()
        manager.delegate = self
        manager.requestWhenInUseAuthorization()
        manager.startUpdatingLocation()
    }

    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        location = locations.first
    }

    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("Location error: \(error.localizedDescription)")
    }
}

// MARK: - WebView
struct WebView: UIViewRepresentable {
    let url: URL

    func makeUIView(context: Context) -> WKWebView {
        let webView = WKWebView()
        let request = URLRequest(url: url)
        webView.load(request)
        return webView
    }

    func updateUIView(_ uiView: WKWebView, context: Context) {}
}

// MARK: - ContentView
struct ContentView: View {
    @StateObject var locationManager = LocationManager()

    var body: some View {
        WebView(url: URL(string: "https://parkingfinder.tech")!)
            .edgesIgnoringSafeArea(.all)
            .onAppear {
                // Use location if needed here
                if let location = locationManager.location {
                    print("User location: \(location.coordinate.latitude), \(location.coordinate.longitude)")
                }
            }
    }
}

// MARK: - App Entry
@main
struct ParkingFinderApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
