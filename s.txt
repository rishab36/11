import SwiftUI
import WebKit
import CoreLocation

// MARK: - WebView Wrapper
struct WebView: UIViewRepresentable {
    let url: URL
    @ObservedObject var locationManager: LocationManager

    func makeUIView(context: Context) -> WKWebView {
        let webView = WKWebView()

        // Enable location access
        webView.configuration.preferences.setValue(true, forKey: "allowFileAccessFromFileURLs")
        webView.configuration.websiteDataStore = .default()

        // Load the URL
        let request = URLRequest(url: url)
        webView.load(request)
        return webView
    }

    func updateUIView(_ uiView: WKWebView, context: Context) {
        // Optionally, you can use locationManager.location here
    }
}

// MARK: - Location Manager
class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
    private let manager = CLLocationManager()
    @Published var location: CLLocation?

    override init() {
        super.init()
        manager.delegate = self
        manager.requestWhenInUseAuthorization()
        manager.startUpdatingLocation()
    }

    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        location = locations.first
    }
}

// MARK: - Main View
struct ContentView: View {
    @StateObject var locationManager = LocationManager()

    var body: some View {
        WebView(url: URL(string: "https://parkingfinder.tech")!, locationManager: locationManager)
            .edgesIgnoringSafeArea(.all)
    }
}

// MARK: - App Entry Point
@main
struct ParkingFinderApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
